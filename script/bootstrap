#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}
  

setup_gitconfig () {
    if ! [ -f git/gitconfig.local.symlink ]
    then
        info 'setup gitconfig'

        git_credential='cache'
        if [ "$(uname -s)" == "Darwin" ]
        then
            git_credential='osxkeychain'
        fi

        user ' - What is your github author username?'
        read -e git_authorname
        user ' - What is your github author email?'
        read -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/" -e "s/AUTHOREMAIL/$git_authoremail/" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/" git/gitconfig.local.symlink > ~/.gitconfig.local
        success 'gitconfig'
    fi
}

link_file () {
  local src=$1 dst=$2
 
  local overwrite= backup= skip=
  local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then

        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then

            local currentSrc="$(readlink $dst)"
        
            if [ "$currentSrc" == "$src" ]
            then
        
                skip=true
        
            else
        
                user "File already exists: $dst ($(basename $src)), what do you want to do?\n\
                [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action
        
                case "$action" in
                    o ) 
                        overwrite=true;;
                    O ) 
                        overwrite_all=true;;
                    b ) 
                        backup=true;;
                    B ) 
                        backup_all=true;;
                    s ) 
                        skip=true;;
                    S ) 
                        skip_all=true;;
                    * ) 
                        ;;
                esac
        
            fi
        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm -rf $dst
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv $dst $dst.backup
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]
    then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}

install_dotfiles () {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

install_config_files () {
    info 'installing config files'

    # Set up XDG_CONFIG_HOME if not already set
    local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
    
    # Create XDG config directory if it doesn't exist
    if [ ! -d "$xdg_config_home" ]; then
        mkdir -p "$xdg_config_home"
        success "created $xdg_config_home directory"
    fi

    local overwrite_all=false backup_all=false skip_all=false

    # Find all files with .config in their name
    for src in $(find -H "$DOTFILES_ROOT" -name '*.config*' -type f -not -path '*.git*')
    do
        # Extract the application name from the directory structure
        # e.g., /path/to/ghostty/ghostty.config -> ghostty
        local app_name=$(basename "$(dirname "$src")")
        local config_file=$(basename "$src")
        
        # Create application directory in XDG config home
        local app_config_dir="$xdg_config_home/$app_name"
        if [ ! -d "$app_config_dir" ]; then
            mkdir -p "$app_config_dir"
            success "created $app_config_dir directory"
        fi
        
        # Set destination path
        local dst="$app_config_dir/config"
        
        # Use the existing link_file function to handle the linking
        link_file "$src" "$dst"
    done
}

setup_gitconfig
install_dotfiles
install_config_files

if [ "$(uname)" == "Darwin" ]
then
    info "installing dependencies"
    if source bin/dot | while read -r data; do info "$data"; done
    then
        success "dependencies installed"
    else
        fail "error installing dependencies"
    fi
fi

echo ''
echo '  All installed!'